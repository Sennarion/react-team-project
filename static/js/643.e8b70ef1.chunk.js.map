{"version":3,"file":"static/js/643.e8b70ef1.chunk.js","mappings":"sSAkBe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAAC,KAAD,UAAYA,GAAhB,GAGpB,EAKKC,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KAEJG,QACC,kCACA,yEAEDC,WACHC,SAAUL,EAAAA,KAEPG,QACC,YACA,0DAEDC,aAWL,OACE,UAAC,KAAD,YACE,SAACE,EAAA,EAAD,KACA,SAAC,KAAD,CACEC,cAjCgB,CACpBL,MAAO,GACPG,SAAU,IAgCNG,iBAAkBT,EAClBU,SAfW,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACpBC,EAAO,CACXV,MAAOQ,EAAOR,MACdG,SAAUK,EAAOL,UAEnBZ,GAASoB,EAAAA,EAAAA,IAAMD,IACfD,GACD,EAKG,UAKE,UAAC,KAAD,CAAYG,aAAa,MAAzB,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,QAAQnB,KAAK,QAAQoB,GAAG,QAAQC,YAAY,OAExD,SAAC,KAAD,CAAOC,QAAQ,QAAf,sBACA,SAAC,KAAD,WACE,gBAAKC,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,sBAGb,SAAC3B,EAAD,CAAWC,KAAK,cAElB,UAAC,KAAD,YACE,SAAC,KAAD,CACEmB,KAAK,WACLnB,KAAK,WACLoB,GAAG,WACHC,YAAY,OAGd,SAAC,KAAD,CAAOC,QAAQ,WAAf,uBACA,SAAC,KAAD,WACE,gBAAKC,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,yBAGb,SAAC3B,EAAD,CAAWC,KAAK,iBAGlB,SAAC,KAAD,WACE,SAAC2B,EAAA,EAAD,CAAQR,KAAK,SAAb,4BAIN,SAAC,KAAD,CAAQS,GAAG,YAAX,4BAGL,C,gECpFc,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAS1B,OAPAC,EAAAA,EAAAA,YAAU,WACM,OAAVH,GAGJF,EAAS,IAAK,CAAEM,SAAS,GAC1B,GAAE,CAACN,EAAUE,KAGZ,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,gCACE,mBACEK,OAAM,UAAKC,EAAL,gBAAwBC,EAAxB,OACNC,MAAM,sBACNrB,KAAK,eAEP,mBACEkB,OAAM,UAAKI,EAAL,gBAA0BC,EAA1B,OACNF,MAAM,qBACNrB,KAAK,eAEP,gBAAKwB,IAAG,UAAKD,GAAiBE,IAAI,6BAGtC,SAAC,KAAD,8BAEF,SAAC,KAAD,WACE,SAAChD,EAAD,QAIP,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport Logo from 'components/Logo/Logo';\nimport icons from '../../images/icons.svg';\nimport {\n  FormWrapper,\n  StyledForm,\n  Wrapper,\n  Label,\n  Icon,\n  Input,\n  ErrorMess,\n  LinkTo,\n} from './LoginForm.styled';\nimport Button from 'components/UI/Button/Button';\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const FormError = ({ name }) => {\n    return (\n      <ErrorMessage\n        name={name}\n        render={message => <ErrorMess>{message}</ErrorMess>}\n      />\n    );\n  };\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n  const userSchema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(\n        /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n        'Email may contain letters, @, numbers. For example bar.ba@test.co.uk.'\n      )\n      .required(),\n    password: yup\n      .string()\n      .matches(\n        /^.{6,12}$/,\n        'Password must contain minimum 6 to 12 include symbols.'\n      )\n      .required(),\n  });\n  const onSubmit = (values, { resetForm }) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(logIn(user));\n    resetForm();\n  };\n\n  return (\n    <FormWrapper>\n      <Logo />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={userSchema}\n        onSubmit={onSubmit}\n      >\n        <StyledForm autoComplete=\"off\">\n          <Wrapper>\n            <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\" \" />\n\n            <Label htmlFor=\"email\"> E-mail</Label>\n            <Icon>\n              <svg width=\"24\" height=\"24\">\n                <use href={`${icons}#icon-email`}></use>\n              </svg>\n            </Icon>\n            <FormError name=\"email\" />\n          </Wrapper>\n          <Wrapper>\n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              placeholder=\" \"\n            />\n\n            <Label htmlFor=\"password\">Password</Label>\n            <Icon>\n              <svg width=\"24\" height=\"24\">\n                <use href={`${icons}#icon-password`}></use>\n              </svg>\n            </Icon>\n            <FormError name=\"password\" />\n          </Wrapper>\n\n          <Wrapper>\n            <Button type=\"submit\">log in</Button>\n          </Wrapper>\n        </StyledForm>\n      </Formik>\n      <LinkTo to=\"/register\">Registration</LinkTo>\n    </FormWrapper>\n  );\n}\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport {\n  Container,\n  LeftSide,\n  RightSide,\n  MainTitle,\n  ImgBox,\n} from './LoginPage.styled';\n\nimport loginTablet1x from '../../images/loginBg-tablet-1x.png';\nimport loginTablet2x from '../../images/loginBg-tablet-2x.png';\nimport loginDesk1x from '../../images/loginBg-desktop-1x.png';\nimport loginDesc2x from '../../images/loginBg-desktop-2x.png';\nimport { getToken } from 'redux/auth/selectors';\n\nexport default function LoginPage() {\n  const navigate = useNavigate();\n  const token = useSelector(getToken);\n\n  useEffect(() => {\n    if (token === null) {\n      return;\n    }\n    navigate('/', { replace: true });\n  }, [navigate, token]);\n\n  return (\n    <Container>\n      <LeftSide>\n        <ImgBox>\n          <picture>\n            <source\n              srcSet={`${loginDesk1x} 1x, ${loginDesc2x} 2x`}\n              media=\"(min-width: 1200px)\"\n              type=\"image/jpg\"\n            />\n            <source\n              srcSet={`${loginTablet1x} 1x, ${loginTablet2x} 2x`}\n              media=\"(min-width: 768px)\"\n              type=\"image/jpg\"\n            />\n            <img src={`${loginTablet2x}`} alt=\"finance wallet app\" />\n          </picture>\n        </ImgBox>\n        <MainTitle>Finance app</MainTitle>\n      </LeftSide>\n      <RightSide>\n        <LoginForm />\n      </RightSide>\n    </Container>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","FormError","name","render","message","userSchema","yup","shape","email","matches","required","password","Logo","initialValues","validationSchema","onSubmit","values","resetForm","user","logIn","autoComplete","type","id","placeholder","htmlFor","width","height","href","icons","Button","to","LoginPage","navigate","useNavigate","token","useSelector","getToken","useEffect","replace","srcSet","loginDesk1x","loginDesc2x","media","loginTablet1x","loginTablet2x","src","alt"],"sourceRoot":""}